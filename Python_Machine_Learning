#Kaitlyn Stevens
#Using the arrhythmia data set and scikit learn package

#Using one of the three datasets to demonstrate k-means clustering using the scikit learn package (50 points). 
#Be sure to review the readings before you start on this assignment. Calculate the sum of least square error for each different values of 'k'. 
#Using Matplotlib determine the optimal number of clusters (k) using the elbow method along with a brief explanation (50 points) . 
#Finally plot the optimal clusters with their centroids along with a brief explanation (50 points). Comment your code as needed.



#Elbow Method
#When assessing a cluster, you want the points distance as close as possible to a cluster (called sum of squares), and clusters as far as possible.
#In the elbow method, you graph the distance between points in a cluster against the number of clusters and you get a decreasing line plot that plateaus (looking like an elbow).
#The 'elbow' is where the graph bends, or goes from decreasing to the consistent plateau. This is the greatest number of clusters and still the greatest distance apart.
#Select the elbow as your 'k' or optimal number of clusters and input that as your k-value in the scatter plot you-re creating (with the same data used to find k).
#In my example with my arrythmia data, the elbow method found 4 clusters to be ideal.


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline 
from sklearn.cluster import KMeans
from sklearn import datasets

import warnings
warnings.filterwarnings("ignore") #There was a warning message that my code may not work in future versions of python, but it works now
heart_data2 = pd.read_csv(r"C:\Users\kisab\Downloads\arrhythmia.data",header=None,usecols=[0,14],names=["age","heart_rate"]) #Select only columns I want
heart_data2["heart_rate"]=heart_data2["heart_rate"].str.replace("?","0") #Change unknown data to 0
heart_data2["heart_rate"]=heart_data2["heart_rate"].astype(int)
heart_data2=heart_data2.sort_values(by=["age","heart_rate"])
heart_data2["age"]=heart_data2['age'].astype(int)
heart_data2["heart_rate"]=heart_data2['heart_rate'].astype(int)

df=pd.DataFrame(heart_data2)
# print(df.head())

distortions = []
K = range(1,10)
for k in K:
    kmeanModel = KMeans(n_clusters=k)
    kmeanModel.fit(df)
    distortions.append(kmeanModel.inertia_)
    

plt.figure(figsize=(16,8))
plt.plot(K, distortions, 'bx-')
plt.xlabel('K (The Optimal # of Clusters)')
plt.ylabel('Distortion')
plt.title('The Elbow Method Showing the Optimal # of Clusters')
plt.show()









#Scatter plot and centroids
#Using the elbow method, I found 4 clusters was ideal for the data. So I found the coordinates of all 4 centroids, graphed them, and also graphed the 
#rest of the data and color coded it depending on which cluster it was closest to.
import numpy as pd
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import scale
import sklearn.metrics as sm
from sklearn import datasets
from sklearn.metrics import confusion_matrix,classification_report

%matplotlib inline
import warnings
warnings.filterwarnings("ignore")

heart_data2 = pd.read_csv(r"C:\Users\kisab\Downloads\arrhythmia.data",header=None,usecols=[0,14],names=["age","heart_rate"])
heart_data2["heart_rate"]=heart_data2["heart_rate"].str.replace("?","0")
heart_data2["heart_rate"]=heart_data2["heart_rate"].astype(int)
heart_data2=heart_data2.sort_values(by=["age","heart_rate"])
heart_data2["age"]=heart_data2['age'].astype(int)
heart_data2["heart_rate"]=heart_data2['heart_rate'].astype(int)



heart= pd.DataFrame(heart_data2, columns=['age', 'heart_rate'])  
kmeans = KMeans(n_clusters=4).fit(heart)
centroids = kmeans.cluster_centers_
print(centroids)

fig, ax = plt.subplots(figsize=(24, 12))

plt.scatter(heart['age'], heart['heart_rate'], c= kmeans.labels_.astype(float), s=50, alpha=0.5)
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=50)



plt.title("Analysis of Heart Rate based on Age", fontsize=18)
  
plt.xlabel('Age (in yrs)', fontsize=18)
plt.ylabel('Heart Rate (BPM)', fontsize=18)


plt.show()











import pandas as pd


heart_data2 = pd.read_csv(r"C:\Users\kisab\Downloads\arrhythmia.data",header=None,usecols=[0,14],names=["age","heart_rate"])
heart_data2["heart_rate"]=heart_data2["heart_rate"].str.replace("?","0")
heart_data2["heart_rate"]=heart_data2["heart_rate"].astype(int)
heart_data2=heart_data2.sort_values(by=["age","heart_rate"])
heart_data2["age"]=heart_data2['age'].astype(int)
heart_data2["heart_rate"]=heart_data2['heart_rate'].astype(int)

heart= pd.DataFrame(heart_data2, columns=['age', 'heart_rate'])  
kmeans = KMeans(n_clusters=4).fit(heart)
#print(kmeans.labels_)
heart_data2['Labels'] = kmeans.labels_
# centroids = kmeans.cluster_centers_
print(heart_data2)

mask0=heart_data2.Labels == 0
heart_cluster0=heart_data2[mask0]

mask1=heart_data2.Labels == 1
heart_cluster1=heart_data2[mask1]

mask2=heart_data2.Labels == 2
heart_cluster2=heart_data2[mask2]

mask3=heart_data2.Labels == 3
heart_cluster3=heart_data2[mask3]




# from sklearn. cluster import KMeans
# kmeans = KMeans()
# kmeans.fit(heart_data2)
# kmeans.inertia_

from sklearn. cluster import KMeans
kmeans = KMeans()
kmeans.fit(heart_cluster0)
kmeans.inertia_
SSE0=kmeans.inertia_
print(SSE0) #Yellow



from sklearn. cluster import KMeans
kmeans = KMeans()
kmeans.fit(heart_cluster1)
SSE1=kmeans.inertia_
print(SSE1) #Purple

from sklearn. cluster import KMeans
kmeans = KMeans()
kmeans.fit(heart_cluster2)
kmeans.inertia_
SSE2=kmeans.inertia_
print(SSE2) #Blue

from sklearn. cluster import KMeans
kmeans = KMeans()
kmeans.fit(heart_cluster3)
kmeans.inertia_
SSE3=kmeans.inertia_
print(SSE3) #Green



#Label 3 is the green area
#Label 2 is the blue area
#Label 1 is the purple area
#Label 0 is the yellow area
